openapi: 3.0.3
info:
  title: Commercia ECommerce API
  version: 1.0.0
  description: This is the backend API for Commercia E-Commerce backend Application
paths:
  /api/carts/:
    get:
      operationId: api_carts_list
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
          description: ''
    post:
      operationId: api_carts_create
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCreateUpdate'
          description: ''
  /api/carts/{cart_id}/:
    get:
      operationId: api_carts_retrieve
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Cart.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: api_carts_update
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Cart.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCreateUpdate'
          description: ''
    patch:
      operationId: api_carts_partial_update
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Cart.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartCreateUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCreateUpdate'
          description: ''
    delete:
      operationId: api_carts_destroy
      description: |-
        ViewSet for managing carts.

        Provides:
            - list: Retrieve all carts.
            - retrieve: Get a specific cart by ID.
            - create: Add a new cart.
            - update: Modify an existing cart.
            - destroy: Remove a cart.
        Uses:
            - CartSerializer for read operations.
            - CartCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Cart.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/categories/:
    get:
      operationId: api_categories_list
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryList'
          description: ''
    post:
      operationId: api_categories_create
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateUpdate'
          description: ''
  /api/categories/{slug}/:
    get:
      operationId: api_categories_retrieve
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
    put:
      operationId: api_categories_update
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateUpdate'
          description: ''
    patch:
      operationId: api_categories_partial_update
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryCreateUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateUpdate'
          description: ''
    delete:
      operationId: api_categories_destroy
      description: |-
        ViewSet for managing categories.

        Provides:
            - list: Retrieve all categories.
            - retrieve: Get a specific category by ID.
            - create: Add a new category.
            - update: Modify an existing category.
            - destroy: Remove a category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/orders/:
    get:
      operationId: api_orders_list
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: api_orders_create
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
  /api/orders/{order_id}/:
    get:
      operationId: api_orders_retrieve
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Order.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: api_orders_update
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
    patch:
      operationId: api_orders_partial_update
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
    delete:
      operationId: api_orders_destroy
      description: |-
        ViewSet for managing orders.

        Provides:
            - list: Retrieve all orders.
            - retrieve: Get a specific order by ID.
            - create: Add a new order.
            - update: Modify an existing order.
            - destroy: Remove an order.
        Uses:
            - OrderSerializer for read operations.
            - OrderCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Order.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/products/:
    get:
      operationId: api_products_list
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductList'
          description: ''
    post:
      operationId: api_products_create
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateUpdate'
          description: ''
  /api/products/{slug}/:
    get:
      operationId: api_products_retrieve
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
    put:
      operationId: api_products_update
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateUpdate'
          description: ''
    patch:
      operationId: api_products_partial_update
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCreateUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateUpdate'
          description: ''
    delete:
      operationId: api_products_destroy
      description: |-
        Read-only ViewSet for products.

        Provides:
            - list: Retrieve all products.
            - retrieve: Get a specific product by ID.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/reviews/:
    get:
      operationId: api_reviews_list
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
    post:
      operationId: api_reviews_create
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
  /api/reviews/{review_id}/:
    get:
      operationId: api_reviews_retrieve
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      parameters:
      - in: path
        name: review_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: api_reviews_update
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      parameters:
      - in: path
        name: review_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
    patch:
      operationId: api_reviews_partial_update
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      parameters:
      - in: path
        name: review_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
    delete:
      operationId: api_reviews_destroy
      description: |-
        ViewSet for managing reviews.

        Provides:
            - list: Retrieve all reviews.
            - retrieve: Get a specific review by ID.
            - create: Add a new review.
            - update: Modify an existing review.
            - destroy: Remove a review.
      parameters:
      - in: path
        name: review_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserList'
          description: ''
    post:
      operationId: api_users_create
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateUpdate'
          description: ''
  /api/users/{user_id}/:
    get:
      operationId: api_users_retrieve
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    put:
      operationId: api_users_update
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateUpdate'
          description: ''
    patch:
      operationId: api_users_partial_update
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserCreateUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateUpdate'
          description: ''
    delete:
      operationId: api_users_destroy
      description: |-
        ViewSet for managing users.

        Provides:
            - list: Retrieve all users.
            - retrieve: Get a specific user by ID.
            - create: Add a new user.
            - update: Modify an existing user.
            - destroy: Remove a user.
        Uses:
            - UserSerializer for read operations.
            - UserCreateUpdateSerializer for write operations.
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/wishlists/:
    get:
      operationId: api_wishlists_list
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wishlist'
          description: ''
    post:
      operationId: api_wishlists_create
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistCreateUpdate'
          description: ''
  /api/wishlists/{wishlist_id}/:
    get:
      operationId: api_wishlists_retrieve
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      parameters:
      - in: path
        name: wishlist_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this wishlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
          description: ''
    put:
      operationId: api_wishlists_update
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      parameters:
      - in: path
        name: wishlist_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this wishlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WishlistCreateUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistCreateUpdate'
          description: ''
    patch:
      operationId: api_wishlists_partial_update
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      parameters:
      - in: path
        name: wishlist_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this wishlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWishlistCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWishlistCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWishlistCreateUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistCreateUpdate'
          description: ''
    delete:
      operationId: api_wishlists_destroy
      description: |-
        ViewSet for managing wishlists.

        Provides:
            - list: Retrieve all wishlists.
            - retrieve: Get a specific wishlist by ID.
            - create: Add a new wishlist.
            - update: Modify an existing wishlist.
            - destroy: Remove a wishlist.
      parameters:
      - in: path
        name: wishlist_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this wishlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/token/login/:
    post:
      operationId: auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreate'
          description: ''
  /auth/token/logout/:
    post:
      operationId: auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /auth/users/{user_id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User.
        required: true
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email/:
    post:
      operationId: auth_users_reset_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email_confirm/:
    post:
      operationId: auth_users_reset_email_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/set_email/:
    post:
      operationId: auth_users_set_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    Cart:
      type: object
      description: |-
        Read-only serializer for the Cart model.

        Purpose:
            - Display cart details including nested items.
        Fields:
            cart_id (UUIDField, read-only): Unique identifier for the cart.
            user_email (EmailField, read-only): Email of the user who owns the cart.
            total_amount (DecimalField, read-only): Total price for all items in the cart.
            created_at (DateTimeField, read-only): Timestamp when cart was created.
            updated_at (DateTimeField, read-only): Last update timestamp.
            items (Nested Serializer, read-only): List of items in the cart.
      properties:
        cart_id:
          type: string
          format: uuid
          readOnly: true
        cart_code:
          type: string
          nullable: true
          description: Unique code for guest carts
          maxLength: 32
        cart_total:
          type: string
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
      required:
      - cart_id
      - cart_total
      - items
    CartCreateUpdate:
      type: object
      description: |-
        Write serializer for Cart.

        Purpose:
            - Allows creation and update of carts with validation.
        Fields:
            items (List of Nested Serializer): List of items to add/update in the cart.
      properties:
        user:
          type: string
          format: uuid
          nullable: true
          description: Authenticated user who owns the cart. Null for guest carts.
        cart_code:
          type: string
          nullable: true
          description: Unique code for guest carts
          maxLength: 32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemInput'
          writeOnly: true
      required:
      - items
    CartItem:
      type: object
      description: |-
        Serializer for CartItem.

        Purpose:
            - Display individual cart items.
            - Exposes product name and price.

        Fields:
            id (AutoField, read-only): Unique ID for the cart item.
            product_name (CharField, read-only): Product name (from related Product).
            product_id (UUIDField, write-only): Product ID (used when creating).
            quantity (IntegerField): Quantity of the product in the cart.
            price (DecimalField, read-only): Current product price.
            total_price (DecimalField, read-only): Computed field = price × quantity.
      properties:
        id:
          type: integer
          readOnly: true
        product_name:
          type: string
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        sub_total:
          type: string
          readOnly: true
        is_active:
          type: boolean
      required:
      - id
      - price
      - product_name
      - sub_total
    CategoryCreateUpdate:
      type: object
      description: |-
        Write serializer for Category.

        Purpose:
            - Allows creating and updating categories.

        Fields:
            name (CharField): Category name.
            description (TextField): Category description.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
      required:
      - name
    CategoryDetail:
      type: object
      description: |-
        Detailed serializer for the Category model.

        Purpose:
            - Used to display detailed category information.
            - Includes all fields of the category.
        Fields:
            category_id (UUIDField, read-only): Unique identifier for the category.
            name (CharField): Category name.
            description (TextField): Category description.
            created_at (DateTimeField, read-only): Creation timestamp.
            updated_at (DateTimeField, read-only): Last update timestamp.
            products (Nested Serializer): List of products belonging to this category.
      properties:
        category_id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductList'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        image_field:
          type: string
          format: uri
          nullable: true
      required:
      - category_id
      - created_at
      - name
      - products
      - updated_at
    CategoryList:
      type: object
      description: |-
        Read-only serializer for the Category model.

        Purpose:
            - Used to display category details.
            - Automatically includes the list of products in the category.

        Fields:
            category_id (UUIDField, read-only): Unique identifier for the category.
            name (CharField): Category name.
      properties:
        category_id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        image_field:
          type: string
          format: uri
          nullable: true
        slug:
          type: string
          nullable: true
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - category_id
      - name
    ItemInput:
      type: object
      properties:
        product:
          type: string
          nullable: true
        quantity:
          type: integer
          default: 1
        is_active:
          type: boolean
      required:
      - product
    Order:
      type: object
      description: |-
        Read-only serializer for the Order model.

        Purpose:
            - Display full order details including nested items.

        Fields:
            order_id (UUIDField, read-only): Unique identifier for the order.
            user_email (EmailField, read-only): Email of the user who placed the order.
            total_amount (DecimalField, read-only): Total price for all items in the order.
            status (CharField): Order status (e.g., pending, completed).
            created_at (DateTimeField, read-only): Timestamp when order was created.
            updated_at (DateTimeField, read-only): Last update timestamp.
            items (Nested Serializer, read-only): List of items in the order.
      properties:
        order_id:
          type: string
          format: uuid
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
      required:
      - created_at
      - items
      - order_id
      - total_amount
      - updated_at
      - user_email
    OrderCreate:
      type: object
      description: |-
        Write serializer for creating/updating Orders.

        Purpose:
            - Create an order with multiple items.
            - Updates automatically recalculate total amount.

        Nested Serializer:
            OrderItemCreateSerializer (inner class): Used for adding order items.

        Fields:
            user (ForeignKey): User placing the order.
            items (Nested Write Serializer): List of products and quantities.
            status (CharField): Order status.
      properties:
        status:
          $ref: '#/components/schemas/StatusEnum'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
          writeOnly: true
        cart:
          type: string
          format: uuid
          writeOnly: true
      required:
      - cart
      - items
    OrderItem:
      type: object
      description: |-
        Read-only serializer for OrderItem.

        Purpose:
            - Display individual order items inside an Order.
            - Exposes product name and price at the time of order.

        Fields:
            id (AutoField, read-only): Unique ID for the order item.
            product_name (CharField, read-only): Product name (from related Product).
            product_id (UUIDField, write-only): Product ID (used when creating).
            quantity (IntegerField): Quantity ordered.
            price (DecimalField, read-only): Product price at the time of order.
            total_price (DecimalField, read-only): Computed field = price × quantity.
      properties:
        id:
          type: integer
          readOnly: true
        product_name:
          type: string
          readOnly: true
        product_id:
          type: string
          format: uuid
          writeOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        total_price:
          type: string
          readOnly: true
      required:
      - id
      - price
      - product_id
      - product_name
      - total_price
    OrderItemCreate:
      type: object
      description: Serializer for creating order items.
      properties:
        product:
          type: string
          format: uuid
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - product
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCartCreateUpdate:
      type: object
      description: |-
        Write serializer for Cart.

        Purpose:
            - Allows creation and update of carts with validation.
        Fields:
            items (List of Nested Serializer): List of items to add/update in the cart.
      properties:
        user:
          type: string
          format: uuid
          nullable: true
          description: Authenticated user who owns the cart. Null for guest carts.
        cart_code:
          type: string
          nullable: true
          description: Unique code for guest carts
          maxLength: 32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemInput'
          writeOnly: true
    PatchedCategoryCreateUpdate:
      type: object
      description: |-
        Write serializer for Category.

        Purpose:
            - Allows creating and updating categories.

        Fields:
            name (CharField): Category name.
            description (TextField): Category description.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
    PatchedOrderCreate:
      type: object
      description: |-
        Write serializer for creating/updating Orders.

        Purpose:
            - Create an order with multiple items.
            - Updates automatically recalculate total amount.

        Nested Serializer:
            OrderItemCreateSerializer (inner class): Used for adding order items.

        Fields:
            user (ForeignKey): User placing the order.
            items (Nested Write Serializer): List of products and quantities.
            status (CharField): Order status.
      properties:
        status:
          $ref: '#/components/schemas/StatusEnum'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
          writeOnly: true
        cart:
          type: string
          format: uuid
          writeOnly: true
    PatchedProductCreateUpdate:
      type: object
      description: |-
        Write serializer for Product.

        Purpose:
            - Allows creation and update of products with validation.

        Fields:
            name (CharField): Product name.
            description (TextField): Product description.
            price (DecimalField): Must be >= 0.
            stock (IntegerField): Product stock.
            categories (ManyToManyField): Category IDs for product classification.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        categories:
          type: array
          items:
            type: string
            format: uuid
        image_field:
          type: string
          format: uri
          nullable: true
    PatchedReviewCreate:
      type: object
      description: |-
        Write serializer for Reviews.

        Purpose:
            - Allows creation of reviews with validation.
        Fields:
            product_id (UUIDField, write-only): Product ID (used when creating).
            quantity (IntegerField): Quantity of the product in the cart.
            price (DecimalField, read-only): Current product price.
            total_price (DecimalField, read-only): Computed field = price × quantity.
      properties:
        product:
          type: string
          nullable: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: 0
        comment:
          type: string
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          nullable: true
          maxLength: 150
        user_id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
    PatchedUserCreateUpdate:
      type: object
      description: |-
        Write serializer for creating or updating User.

        Special behavior:
            - Password is write-only and is automatically hashed before saving.

        Fields:
            email (EmailField): Required, unique identifier for login.
            username (CharField): Optional username.
            password (CharField, write-only): User's password (hashed before saving).
            role (CharField): User role (customer/admin).
            phone_number (CharField): Optional contact number.
            address (TextField): Optional address.
            date_of_birth (DateField): Optional date of birth.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          nullable: true
          maxLength: 150
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        address:
          type: string
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
    PatchedWishlistCreateUpdate:
      type: object
      description: |-
        Write serializer for Wishlist.

        Purpose:
            - Allows creation and update of wishlists with validation.

        Fields:
            user (CharField): Username of the user.
            products (List of Primary Keys): List of product IDs to add to the wishlist.
      properties:
        product:
          type: string
          nullable: true
          writeOnly: true
    ProductCreateUpdate:
      type: object
      description: |-
        Write serializer for Product.

        Purpose:
            - Allows creation and update of products with validation.

        Fields:
            name (CharField): Product name.
            description (TextField): Product description.
            price (DecimalField): Must be >= 0.
            stock (IntegerField): Product stock.
            categories (ManyToManyField): Category IDs for product classification.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        categories:
          type: array
          items:
            type: string
            format: uuid
        image_field:
          type: string
          format: uri
          nullable: true
      required:
      - name
      - price
      - stock
    ProductDetail:
      type: object
      description: |-
        Read-only serializer for the Product model.

        Purpose:
            - Used to display product information.
            - Includes the categories the product belongs to.

        Fields:
            product_id (UUIDField, read-only): Unique identifier for the product.
            name (CharField): Product name.
            description (TextField): Product description.
            price (DecimalField): Current price.
            stock (IntegerField): Available stock quantity.
            created_at (DateTimeField, read-only): Creation timestamp.
            updated_at (DateTimeField, read-only): Last update timestamp.
            categories (ManyToManyField): Categories linked to the product.
      properties:
        product_id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        slug:
          type: string
          nullable: true
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image_field:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        categories:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - name
      - price
      - product_id
      - stock
      - updated_at
    ProductList:
      type: object
      description: |-
        Read-only serializer for the Product model.

        Purpose:
            - Used to display product information.
            - Includes the categories the product belongs to.

        Fields:
            product_id (UUIDField, read-only): Unique identifier for the product.
            name (CharField): Product name.
            description (TextField): Product description.
            price (DecimalField): Current price.
            stock (IntegerField): Available stock quantity.
      properties:
        product_id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        slug:
          type: string
          nullable: true
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image_field:
          type: string
          format: uri
          nullable: true
      required:
      - name
      - price
      - product_id
      - stock
    Review:
      type: object
      description: |-
        Serializer for Reviews.

        Purpose:
            - Display individual reviews.
            - Exposes product name and price.

        Fields:
            id (AutoField, read-only): Unique ID for the review.
            product_name (CharField, read-only): Product name (from related Product).
            product_id (UUIDField, write-only): Product ID (used when creating).
            quantity (IntegerField): Quantity of the product in the cart.
            price (DecimalField, read-only): Current product price.
            total_price (DecimalField, read-only): Computed field = price × quantity.
      properties:
        review_id:
          type: string
          format: uuid
          readOnly: true
        product_name:
          type: string
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: 0
        comment:
          type: string
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - product_name
      - rating
      - review_id
      - updated_at
      - user
    ReviewCreate:
      type: object
      description: |-
        Write serializer for Reviews.

        Purpose:
            - Allows creation of reviews with validation.
        Fields:
            product_id (UUIDField, write-only): Product ID (used when creating).
            quantity (IntegerField): Quantity of the product in the cart.
            price (DecimalField, read-only): Current product price.
            total_price (DecimalField, read-only): Computed field = price × quantity.
      properties:
        product:
          type: string
          nullable: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: 0
        comment:
          type: string
      required:
      - comment
      - product
      - rating
    RoleEnum:
      enum:
      - customer
      - admin
      type: string
      description: |-
        * `customer` - Customer
        * `admin` - Admin
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - current_password
      - new_email
    StatusEnum:
      enum:
      - pending
      - processing
      - shipped
      - delivered
      - canceled
      type: string
      description: |-
        * `pending` - Pending
        * `processing` - Processing
        * `shipped` - Shipped
        * `delivered` - Delivered
        * `canceled` - Canceled
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          nullable: true
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
    UserCreate:
      type: object
      properties:
        username:
          type: string
          nullable: true
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        user_id:
          type: string
          format: uuid
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - user_id
    UserCreateUpdate:
      type: object
      description: |-
        Write serializer for creating or updating User.

        Special behavior:
            - Password is write-only and is automatically hashed before saving.

        Fields:
            email (EmailField): Required, unique identifier for login.
            username (CharField): Optional username.
            password (CharField, write-only): User's password (hashed before saving).
            role (CharField): User role (customer/admin).
            phone_number (CharField): Optional contact number.
            address (TextField): Optional address.
            date_of_birth (DateField): Optional date of birth.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          nullable: true
          maxLength: 150
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        address:
          type: string
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
      required:
      - email
      - password
    UserDetail:
      type: object
      description: |-
        Read-only serializer for detailed User information.

        Purpose:
            - Expose all user details for detailed display in APIs.

        Fields:
            Same as UserListSerializer, but with all fields included.
      properties:
        user_id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        date_joined:
          type: string
          format: date-time
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        address:
          type: string
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
      required:
      - date_joined
      - email
      - is_active
      - is_staff
      - user_id
    UserList:
      type: object
      description: |-
        Read-only serializer for the User model.

        Purpose:
            - Expose non-sensitive user details for display in APIs.
            - Hide password and other sensitive fields.

        Fields:
            user_id (UUIDField, read-only): Unique identifier for the user.
            username (CharField): Optional username.
            email (EmailField): User's email (used for login).
            first_name (CharField): User's first name.
            last_name (CharField): User's last name.
            is_active (BooleanField, read-only): Whether the user account is active.
            is_staff (BooleanField, read-only): Whether the user has staff/admin rights.
            date_joined (DateTimeField, read-only): Timestamp when the user registered.
      properties:
        user_id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_joined
      - email
      - is_active
      - is_staff
      - user_id
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - new_email
    Wishlist:
      type: object
      description: |-
        Read-only serializer for the Wishlist model.

        Purpose:
            - Used to display wishlist information.
            - Includes the products in the wishlist.

        Fields:
            user (CharField, read-only): Username of the user.
            products (ManyToManyField): Products in the wishlist.
      properties:
        wishlist_id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductList'
          readOnly: true
      required:
      - products
      - user
      - wishlist_id
    WishlistCreateUpdate:
      type: object
      description: |-
        Write serializer for Wishlist.

        Purpose:
            - Allows creation and update of wishlists with validation.

        Fields:
            user (CharField): Username of the user.
            products (List of Primary Keys): List of product IDs to add to the wishlist.
      properties:
        product:
          type: string
          nullable: true
          writeOnly: true
      required:
      - product
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
